@page "/"

@using KustoPlayground.Core
@inject KustoDatabase KustoDatabase

<h3>Add Kusto table from CSV</h3>

<label for="csvData">CSV data:</label>
<br/>
<textarea id="csvData" @bind="CsvText" rows="6" cols="60" placeholder="Paste CSV header and rows here"></textarea>
<br/>
<br/>
<label for="tableName">Table name:</label>
<br/>
<input id="tableName" @bind="CsvTableName" placeholder="Table name (e.g., MyTable)"/>
<br/>
<button @onclick="ProcessCsv">Add Table</button>

@if (CsvAdded)
{
    <p><em>CSV table "@CsvTableName" added successfully.</em></p>
}

<hr/>

<h3>Kusto Processor</h3>

<textarea @bind="KqlQuery" rows="10" cols="60"></textarea>
<br/>
<button @onclick="ExecuteKusto">Process Kusto Query</button>

@if (Results.Any())
{
    <h4>Results</h4>
    <ul>
        @foreach (var line in Results)
        {
            <li>@line</li>
        }
    </ul>
}

@if (Errors.Any())
{
    <h4 style="color: red;">Errors</h4>
    <ul>
        @foreach (var line in Errors)
        {
            <li>@line</li>
        }
    </ul>
}

@code {

    private string CsvText { get; set; } = @"DamageProperty,StartTime,State,EventType
20000,8/23/2025 6:20:00 AM,FLORIDA,Hurricane
5000,3/28/2023 10:30:00 AM,TEXAS,Flood
5000,6/1/2024 4:50:30 PM,FLORIDA,Tornado
";

    private string CsvTableName { get; set; } = "StormEvents";
    private bool CsvAdded { get; set; }

    private string KqlQuery { get; set; } = @"StormEvents
    | where State == 'FLORIDA' and DamageProperty > 10000
    | project StartTime, EventType, DamageProperty
    | take 10
";

    private List<string> Results { get; set; } = new();
    
    private List<string> Errors { get; set; } = new();

    private void ProcessCsv()
    {
        if (string.IsNullOrWhiteSpace(CsvText) || string.IsNullOrWhiteSpace(CsvTableName))
        {
            return;
        }

        var lines = CsvText.Split('\n', StringSplitOptions.RemoveEmptyEntries)
            .Select(l => l.Trim())
            .ToList();

        if (lines.Count < 2)
        {
            return;
        }

        var headers = lines[0].Split(',').Select(h => h.Trim()).ToList();

        var rows = lines.Skip(1)
            .Select(line => line.Split(',')
                .Select((val, idx) => new KeyValuePair<string, object?>(headers[idx], val.Trim()))
                .ToDictionary(kv => kv.Key, kv => kv.Value))
            .ToList();

        Table newTable = TableBuilderFromCsv.Build(new TableDef()
        {
            Name = CsvTableName,
            Columns = headers.Select(header => new ColumnDef { Name = header }).ToList(),
            Rows = rows,
        });

        KustoDatabase.AddTable(newTable);
        CsvAdded = true;
        
        Results = new List<string>();
        Errors = new List<string>();
    }

    private void ExecuteKusto()
    {
        Results = new List<string>();
        Errors = new List<string>();
        
        var executeResults = KustoDatabase.ExecuteQuery(KqlQuery);

        if (executeResults.ResultRows != null)
        {
            Results = executeResults.ResultRows
                .Select(row =>
                    string.Join(", ", row.Select(kv => $"{kv.Key}={kv.Value}")))
                .ToList();

            if (Results.Count == 0)
            {
                Results.Add("Empty result");
            }
        }

        if (executeResults.ExecutionErrors != null)
        {
            Errors = executeResults.ExecutionErrors
                .Select(error => $"{error.Code} -- {error.Description}")
                .ToList();
        }
    }

}
